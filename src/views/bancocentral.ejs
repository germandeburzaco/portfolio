


<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/w3.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=PT+Sans:wght@400;700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css">
    <link rel="stylesheet" href="/css/c3.css">
    <link rel="stylesheet" href="/css/proyects.css">
    <title>PORTFOLIO</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/img/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/img/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/img/favicon-16x16.png">
    <style>
        h1{
          font-family: 'PT Sans', sans-serif;
          display: block;
          font-size: 2em;
          margin-block-start: 0.67em;
          margin-block-end: 0.67em;
          margin-inline-start: 0px;
          margin-inline-end: 0px;
          font-weight: bold;
          margin-top: 0;
          margin-bottom: 0;
          font-size: 32px;
        }
        #contenedorPrincipal {
            display: grid; 
            grid-template-columns: 1fr; 
            grid-auto-rows: auto; 
            gap: 4px 4px; 
            
          }

          @media screen and (max-width: 768px) {
            #contenedorPrincipal {
              grid-template-columns: 1fr;
              grid-template-rows: auto; /* Puedes ajustar esto según tus necesidades */
              grid-template-areas:
                "."
                "."
                ".";
            }
          }
      </style>
</head>

<body id="elemBody" class="modoClaro  modoOscuro">
  <header>
    <%- include ("partials/_heads") %>
  </header>
  <div >
    <div style="width: 80%; margin: 0 auto;">
      <p class="main-texto">Datos desde  <span class="main-nombre"> BANCO CENTRAL</span><span class="main-punto"
          id="main-punto">_</span>
      </p>      
    </div>
  </div>
  <div  style="border-bottom: 1px solid rgba(128, 128, 128, 0.282); text-align: center;">   
    <div id="contenedorPrincipal" style="width: 80%; margin: 0 auto;">
      <div id="grafico1"></div>
      <div id="grafico2"></div>
      <div id="grafico3">3</div>
      <div id="grafico4">4</div>
      <div id="grafico5">5</div>
      <div id="grafico6">6</div>
    </div>
</div>
  <footer>
    <div class="containterMain--redes">
      <ul class="redes">
        <a class="redes-items" href="https://twitter.com/GermanDaniG"><i class="fab fa-twitter"></i></a>
        <a class="redes-items" href="https://github.com/germandeburzaco"><i class="fab fa-github"></i></a>
        <a class="redes-items" href="https://codepen.io/GermanDaniG"><i class="fab fa-codepen"></i></a>
        <a class="redes-items" href="https://twitter.com/GermanDaniG"><i class="fas fa-envelope"></i></a>

      </ul>
    </div>
    <div class="footer-bajo">
    </div>
  </footer>
  <script src="/js/d3.v5.min.js"></script>
  <script src="/js/c3.min.js"></script>

  <script>
    window.addEventListener("load", () => {

      var dataBanco = <%- JSON.stringify(datosCentral) %>;
     // var datosCentral = <%- (datosCentral) %>;

      console.log(dataBanco)

      const chart1 = c3.generate({
        bindto: '#grafico1', // ID del elemento HTML donde se mostrará el gráfico
        data: {
          json: dataBanco[0],
          keys: {
            x: 'd', // Datos para el eje X
            value: ['v'] // Datos para el eje Y
          },
          type: 'bar',
          labels: true
        },
        zoom: {
            enabled: true
        },
        title: {
            text: `TASA DE INTERES A 30 DIAS`
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%Y-%m-%d',
              rotate: 90, // Ángulo de rotación en grados
              multiline: false
            }
          }
        }
      });

      const chart2 = c3.generate({
        bindto: '#grafico2', // ID del elemento HTML donde se mostrará el gráfico
        data: {
          json: dataBanco[1],
          keys: {
            x: 'd', // Datos para el eje X
            value: ['v'] // Datos para el eje Y
          },
          type: 'bar',
          labels: true
        },
        zoom: {
            enabled: true
        },
        title: {
            text: `INFLACION MENSUAL OFICIAL`
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%Y-%m-%d',
              rotate: 90, // Ángulo de rotación en grados
              multiline: false
            }
          }
        }
      });

      const chart3 = c3.generate({
        bindto: '#grafico3', // ID del elemento HTML donde se mostrará el gráfico
        data: {
          json: dataBanco[2],
          keys: {
            x: 'd', // Datos para el eje X
            value: ['v'] // Datos para el eje Y
          },
          type: 'bar',
          labels: true
        },
        zoom: {
            enabled: true
        },
        title: {
            text: `inflacion_interanual_oficial`
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%Y-%m-%d',
              rotate: 90, // Ángulo de rotación en grados
              multiline: false
            }
          }
        }
      });

      const chart4 = c3.generate({
        bindto: '#grafico4', // ID del elemento HTML donde se mostrará el gráfico
        data: {
          json: dataBanco[3],
          keys: {
            x: 'd', // Datos para el eje X
            value: ['v'] // Datos para el eje Y
          },
          type: 'bar',
          labels: true
        },
        zoom: {
            enabled: true
        },
        title: {
            text: `inflacion_esperada_oficial`
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%Y-%m-%d',
              rotate: 90, // Ángulo de rotación en grados
              multiline: false
            }
          }
        }
      });

      const chart5 = c3.generate({
        bindto: '#grafico5', // ID del elemento HTML donde se mostrará el gráfico
        data: {
          json: dataBanco[4],
          keys: {
            x: 'd', // Datos para el eje X
            value: ['v'] // Datos para el eje Y
          },
          type: 'bar',
          labels: true
        },
        zoom: {
            enabled: true
        },
        title: {
            text: `inflacion_esperada_oficial`
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%Y-%m-%d',
              rotate: 90, // Ángulo de rotación en grados
              format: function (x) { return x.getFullYear() + " " + x.getMonth(); },
              multiline: false
            }
          }
        }
      });

      /****/
      var dataProv = ['data1', 'data2', 'data3', 'data4'];
      var dataCant = [12, 34, 34 , 66, 77];

      var chartx = c3.generate({
        bindto: "#grafico6",
        data: {
            rows: [
            dataProv,
            dataCant,
            ],   
            labels: true,
            type: 'bar'
        },
        title: {
            text: `ESTO ES UN TEST`
        },
        size: {
            height: 440,                                   
        },
        labels: true,
        }); 

/*
      var chart = c3.generate({
        bindto: d3.select('.cc'),
        type: 'bar',
        data: {
          x: 'AÑO:',
          columns: [
            añño,
            ccantidad,
            ccproced,
            ccdete,
          ],
          labels: true,
          type: 'bar',
          colors: {
            'CANTIDAD (KG):': 'rgba( 183, 28, 28, 1)',
            'PROCEDIMIENTOS:': '#25221b',
            'DETENIDOS:': 'rgba( 0, 0, 0, 1)'
          },
          hide: ['DETENIDOS:', 'PROCEDIMIENTOS:']
        },
        tooltip: {
          show: false
        },
        legend: {
          show: true
        },
        title: {
          text: 'Cocaina'
        }
      });

      let tipoConsulta = "reportesVariosMEDIOSEMPLEADOSgraficos"
                        fetch("/protected/api?tipoqry=" + tipoConsulta + "&qrydesde=" + reportedesde + "&qryhasta=" + reportehasta + "&qryMEDIOEMPLEADO=" + medioEmpleado + "&slcRegion=" + slcRegion )
                            .then(response => response.json())
                            .then(data => { 

                                document.getElementById("tablaMEDIOSEMPLEADOSEdetallesgraficos").innerHTML = ""

                                document.getElementById("txtMEDIOSEMPLEADOSgraficos").innerText = "MEDIOS EMPLEADOS: " + document.getElementById("slcMEDIOEMPLEADO").value 

                                data.respuestaMEDIOSEMPLEADOSprovincia.forEach(dato => {                 
                                    let tr = document.createElement('tr')
                                    tr.innerHTML = `
                                                <tr class="trHover">                                              
                                                    <td style=" font-size: 10px " >${dato.PROVINCIA}</td> 
                                                    <td style=" text-align: right; font-size: 10px">${dato.PROCEDIMIENTOS}</td> 
                                                </tr>
                                        `;
                                    document.getElementById("tablaMEDIOSEMPLEADOSEdetallesgraficos").appendChild(tr)
                                })  
                                
                                // GENERACION DE GRAFICO

                                //console.log(data.respuestaMEDIOSEMPLEADOSprovincia)

                                var dataProv = [];
                                var dataCant = [];

                                dataProv.push("PROVINCIA");
                                dataCant.push("PROCEDIMIENTOS");

                                data.respuestaMEDIOSEMPLEADOSprovincia.forEach(dato => {
                                        dataProv.push(dato.PROVINCIA);
                                        dataCant.push(dato.PROCEDIMIENTOS);                                 
                                })

                                var chart1 = c3.generate({
                                bindto: "#graphMediosEmpleados",
                                data: {
                                    rows: [
                                    dataProv,
                                    dataCant,
                                    ],
                                    type: 'pie',
                                    
                                    labels: true,
                                },
                                title: {
                                    text: `${document.getElementById("slcMEDIOEMPLEADO").value }`
                                },
                                size: {
                                    height: 440,                                   
                                },
                                labels: true,
                                });                                  
                                
                            })  
                    })*/
                    /***** FIN MODAL PARA MEDIOS EMPLEADOS GRAFICOS*********/








      
        var iconoLight = document.getElementsByClassName("fa-moon")
        var iconoMenu = document.getElementById("iconoMenu")
    
        let puntos = document.getElementById("main-punto")
        let puntoTitulo = document.getElementById("puntoTitulo")
        const puntoIntermitente = () => {
            puntos.classList.toggle("main-punto-oculto")
            puntoTitulo.classList.toggle("main-punto-oculto")
            setTimeout(puntoIntermitente, 1000)
        }
        puntoIntermitente()

        iconoLight[0].addEventListener('click', (e) => {
        
            var btnModo = document.getElementById('btnModo')
            var elemBody = document.getElementById('elemBody')

            if (btnModo.value == `-Dark Mode-`) {
                iconoMenu.style.color = "#ffffff"
                btnModo.value = "-Light Mode-"
                elemBody.classList.toggle("modoClaro")
                iconoLight[0].classList.toggle("fa-sun")
                iconoLight[0].classList.toggle("fa-moon")
            } else {
                btnModo.value = "-Dark Mode-"
                iconoMenu.style.color = "#000000"
                elemBody.classList.toggle("modoClaro")
                iconoLight[0].classList.toggle("fa-sun")
                iconoLight[0].classList.toggle("fa-moon")
            }
        });

        iconoMenu.addEventListener("click", ()=>{
          document.getElementById('sidebar').classList.toggle('active');
        })

    })

  </script>
</body>

</html>